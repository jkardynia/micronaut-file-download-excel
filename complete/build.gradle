plugins {
    id "net.ltgt.apt-eclipse" version "0.21"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id "groovy"
    //tag::buildscriptDependenciesWebdriverBinaries[]
    id "com.github.erdi.webdriver-binaries" version "2.1"
    //end::buildscriptDependenciesWebdriverBinaries[]
}

version "0.1"
group "example.micronaut"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"

    //tag::micronaut-graal[]
    annotationProcessor "io.micronaut:micronaut-graal"
    //end::micronaut-graal[]
    //tag::svm[]
    compileOnly "org.graalvm.nativeimage:svm:19.3.0"
    //end::svm[]

    //tag::views[]
    implementation "io.micronaut:micronaut-views-thymeleaf"
    runtime "org.thymeleaf:thymeleaf:3.0.9.RELEASE"
    //end::views[]

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    //tag::spreadsheetbuilder[]
    implementation "builders.dsl:spreadsheet-builder-poi:2.0.0"
    //end::spreadsheetbuilder[]

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")

    //tag::geb[]
    testImplementation "org.gebish:geb-spock:$gebVersion"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    //end::geb[]

    //tag::spock[]
    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "io.micronaut.test:micronaut-test-spock"
    //end::spock[]

}

test.classpath += configurations.developmentOnly

mainClassName = "example.micronaut.Application"

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

//tag::webdriverBinaries[]
webdriverBinaries {
    chromedriver {
        version = chromeDriverVersion
    }
    geckodriver {
        version = geckoDriverVersion
    }
}
//end::webdriverBinaries[]

//tag::taskWithTypeTest[]
tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env') // <1>
    systemProperty "download.folder", System.getProperty('download.folder') // <2>
    beforeTest { descriptor -> logger.quiet " -- $descriptor" }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
    }
}
//end::taskWithTypeTest[]
